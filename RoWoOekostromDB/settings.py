"""
Django settings for RoWoOekostromDB project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/

To dont fill the git with secrets or machine depended settings, there is
a `local.py` file that contains local settings and secret.
The following values can be defined there:
 * SECRET_KEY
 * DEBUG
 * DATABASES
 * ROWO_PROVIDER_EXCEL_URL
"""
import logging
import os

from .functions import generate_secret_key_and_write_to_local_py

logger = logging.Logger("RoWoOekostromDB.settings")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
try:
    from .local import SECRET_KEY
except ImportError:
    logger.warning("Could not import SECRET_KEY from local.py file, adding it to it!")
    generate_secret_key_and_write_to_local_py()
    try:
        from .local import SECRET_KEY
    except ImportError:
        raise EnvironmentError("Tried to write and import local.py, which failed.")
    else:
        logger.info("Generated new secret key and saved it to local.py")

try:
    from .local import DEBUG
except ImportError:
    DEBUG = False

try:
    from .local import ALLOWED_HOSTS
except ImportError:
    ALLOWED_HOSTS = []

AUTH_USER_MODEL = "user_app.User"

# Application definition

INSTALLED_APPS = [
    "polymorphic",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "localflavor",
    "phonenumber_field",
    "django_extensions",
    "user_app",
    "anbieter",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "RoWoOekostromDB.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "RoWoOekostromDB.wsgi.application"

PHONENUMBER_DEFAULT_REGION = "DE"

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
try:
    from .local import DATABASES
except ImportError:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        "OPTIONS": {"user_attributes": ("email", "full_name", "short_name")},
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]
# Use Argon2 by default as it the state of the art
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

try:
    from .local import ROWO_PROVIDER_EXCEL_URL
except ImportError:
    # Don't do anything if not found as not needed
    pass

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {name} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{asctime} - {name} - {levelname}: {message}",
            "style": "{",
        },
        "basic": {"format": "{asctime} {levelname}: {message}", "style": "{",},
    },
    "handlers": {
        "console_info": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "simple",
        },
        "console_basic_info": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "basic",
        },
    },
    "loggers": {
        "anbieter.scripts": {
            "handlers": ["console_basic_info"],
            "propagate": True,
            "level": "INFO",
        }
    },
}

# Import local settings if existing
try:
    from .local import STATIC_URL
except ImportError:
    pass

try:
    from .local import STATIC_ROOT
except ImportError:
    pass

try:
    from .local import MEDIA_ROOT
except ImportError:
    pass

try:
    from .local import MEDIA_URL
except ImportError:
    pass
