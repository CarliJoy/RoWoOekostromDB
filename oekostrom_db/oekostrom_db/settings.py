"""
Django settings for oekostrom_db project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import logging
import os
from pathlib import Path

from django.http import HttpRequest, HttpResponseForbidden

TRUE_REPRESENTATIONS = {"true", "y", "yes", "on"}


def to_bool(value: str | bool) -> bool:
    if isinstance(value, bool):
        return value
    try:
        return bool(int(value))
    except ValueError:
        return value in TRUE_REPRESENTATIONS


def to_list(values: str | list[str]) -> list[str]:
    if isinstance(values, str):
        return values.split(" ")
    return values


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# needs to be higher then the number of anbieter
DATA_UPLOAD_MAX_NUMBER_FIELDS = 3000

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = to_bool(os.environ.get("DEBUG", False))

ALLOWED_HOSTS = to_list(
    os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost 127.0.0.1 [::1]")
)
CSRF_TRUSTED_ORIGINS = to_list(
    os.environ.get("DJANGO_CSRF_TRUSTED_ORIGINS", "http://127.0.0.1:8000")
)


def csrf_failure(request: "HttpRequest", reason: str = "") -> HttpResponseForbidden:
    logging.getLogger(__name__).warning(f"CSRF failed: {reason}")

    return HttpResponseForbidden(
        f"<html><head><title>CSRF Failure</title></head><body>"
        f"<h1>CSRF Failure</h1>"
        f"CSRF failed: {reason}. DEBUG INFO: <br />"
        f"CSRF cookie set: {'csrftoken' in request.COOKIES} <br />"
        f"Session would expire in: {request.session.get_expiry_age()}s<br />"
        f"Session cookie reset on browser close: {request.session.get_expire_at_browser_close()}"
        "</body></html>"
    )


CSRF_FAILURE_VIEW = csrf_failure

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.forms",
    "anbieter",
    "crispy_forms",
    "crispy_bootstrap5",
]

ASGI_APPLICATION = "oekostrom_db.asgi.application"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "oekostrom_db.middleware.log_startup",
]

ROOT_URLCONF = "oekostrom_db.urls"

CSRF_COOKIE_SECURE = to_bool(os.environ.get("DJANGO_HTTPS", False))
SESSION_COOKIE_SECURE = to_bool(os.environ.get("DJANGO_HTTPS", False))

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
# Render our template forms
# https://stackoverflow.com/a/46836189/3813064
FORM_RENDERER = "django.forms.renderers.TemplatesSetting"

WSGI_APPLICATION = "oekostrom_db.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("DB_ENGINE"),
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "de-de"

TIME_ZONE = "Europe/Berlin"

USE_I18N = True
USE_L10N = True

USE_TZ = True

ROWO_MIRRORING = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
APP_STATIC_ROOT = BASE_DIR / "static"
STATIC_ROOT = BASE_DIR.parent / "static"
MEDIA_ROOT = Path(os.environ.get("MEDIA_ROOT", BASE_DIR.parent / "uploads"))
MEDIA_URL = os.environ.get("MEDIA_URL", "uploads/").rstrip("/") + "/"

STATICFILES_DIRS = [
    APP_STATIC_ROOT,
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

_info_to_console = {
    "handlers": ["console"],
    "level": "INFO",
    "propagate": False,
}
_debug_to_console_on_debug = {
    "handlers": ["console"],
    "level": "DEBUG" if DEBUG else "INFO",
    "propagate": False,
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "verbose": {
            "format": "{asctime} {levelname} {name} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "": _info_to_console,
        # Be verbose when debug mode is on
        "django": _debug_to_console_on_debug,
        "oekostrom_db": _debug_to_console_on_debug,
        "anbieter": _debug_to_console_on_debug,
        # but don't log all this autoreload stuff
        # see https://stackoverflow.com/a/75293747/3813064
        "django.utils.autoreload": _info_to_console,
        "django.db.backends": _info_to_console,
    },
}
SESSION_COOKIE_AGE = 3600 * 24 * 30  # a month
SESSION_SAVE_EVERY_REQUEST = True

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
