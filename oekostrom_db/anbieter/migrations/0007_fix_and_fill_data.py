# Generated by Django 5.1 on 2024-08-09 21:18

import logging
from typing import TYPE_CHECKING, Optional

from django.db import migrations

if TYPE_CHECKING:
    from django.apps.registry import Apps
    from django.db.backends.base.schema import BaseDatabaseSchemaEditor

    from ..models import Anbieter, AnbieterBase


logger = logging.getLogger("anbieter.migration")


def update_obj(
    obj: "Anbieter",
    sources: tuple[Optional["AnbieterBase"], ...],
    *props: str,
) -> bool:
    """
    Update obj with props from sources if
    """

    for source in sources:
        if source and all(getattr(source, prop) for prop in props):
            if all(getattr(obj, prop) == getattr(source, prop) for prop in props):
                return False
            name = ", ".join(props)
            logger.info(f"{obj.name}: updating {name} from {source.__class__.__name__}")
            for prop in props:
                setattr(obj, prop, getattr(source, prop))
            return True
    return False


def fix_data(
    apps: "Apps",
    schema_editor: "BaseDatabaseSchemaEditor",  # noqa ARG001
) -> None:
    """
    Fix wrong homepage and fill missing data on entries
    """
    anbieter: type[Anbieter] = apps.get_model("anbieter", "Anbieter")
    for obj in anbieter.objects.filter(homepage__istartswith="http:/w"):
        obj.homepage = obj.homepage.replace("http:/w", "http://w")
        logger.info(f"Fix homepage for {obj}")
        obj.save()

    count = 0
    for obj in anbieter.objects.select_related(
        "ok_power", "stromauskunft", "verivox"
    ).all():
        sources = (obj.ok_power, obj.stromauskunft, obj.verivox)

        updated = False
        updated |= update_obj(obj, sources, "homepage")
        updated |= update_obj(obj, sources, "phone")
        updated |= update_obj(obj, sources, "mail")
        updated |= update_obj(obj, sources, "fax")
        updated |= update_obj(obj, sources, "street", "city", "plz")

        if updated:
            obj.save()
            count += 1

    logger.info(f"Updated {count} entries")


class Migration(migrations.Migration):
    dependencies = [
        ("anbieter", "0006_anbieter_status"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="anbieter",
            options={"verbose_name_plural": "Anbieter"},
        ),
        migrations.AlterModelOptions(
            name="anbietername",
            options={"verbose_name_plural": "Anbieter: Namessammlung"},
        ),
        migrations.RunPython(fix_data),
    ]
